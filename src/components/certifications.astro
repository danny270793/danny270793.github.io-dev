---
import MyCertifications, {
  Certification,
  CategoryOrder,
} from "../libraries/me/knowledges/certifications";
import CertificationsBackground from "../../public/images/parallax/certification.jpg";
import { Image } from "astro:assets";

const { parallaxHeight = "25vh" } = Astro.props;
---

<div
  id="certifications"
  class="parallax w3-display-container"
  style={`background-image: url("${CertificationsBackground.src}"); min-height: ${parallaxHeight}`}
>
  <div class="w3-display-middle no-spaces">
    <span
      class="w3-center w3-padding w3-black w3-xlarge w3-wide w3-animate-opacity"
    >
      Certifications
    </span>
  </div>
</div>
<div class="w3-content w3-container w3-padding-64">
  <div class="w3-center">
    <div class="category-filter w3-bar-item w3-button w3-green">All</div>
    {
      [
        ...new Set(
          MyCertifications.map(
            (certification: Certification) => certification.category,
          ).sort((a, b) => CategoryOrder[a] - CategoryOrder[b]),
        ),
      ].map((category) => (
        <div class="category-filter w3-bar-item w3-button">{category}</div>
      ))
    }
  </div>

  {
    MyCertifications.sort(
      (a, b) =>
        (CategoryOrder[a.category] + 1) * 10 +
        a.order -
        (CategoryOrder[b.category] + 1) * 10 +
        b.order,
    )
      .chunk(3)
      .map((certifications: Certification[]) => (
        <div>
          {certifications.map((certification: Certification) => (
            <div
              class="w3-row w3-hover-shadow w3-hide-medium w3-hide-large category-item"
              data-category={certification.category}
            >
              <a href={certification.link} target="_blank">
                <div class="w3-col" style="width: 150px;">
                  <Image
                    class="w3-padding"
                    src={certification.image}
                    alt={certification.name}
                    style="width: 100%; height: auto;"
                  />
                </div>
                <div class="w3-rest">
                  <h5>
                    <strong>
                      {certification.code === ""
                        ? certification.name
                        : `(${certification.code}) - ${certification.name}`}
                    </strong>
                  </h5>
                  <p>{certification.brand}</p>
                </div>
              </a>
            </div>
          ))}

          <div class="w3-row w3-hide-small">
            {certifications.map((certification: Certification) => (
              <div
                class="w3-third w3-center w3-padding category-item"
                data-category={certification.category}
              >
                <div class="w3-hover-shadow w3-padding">
                  <a href={certification.link} target="_blank">
                    <Image
                      class="w3-center"
                      src={certification.image}
                      alt={certification.name}
                      style="width: 100%; height: auto;"
                    />
                    <h5>
                      <strong>
                        {certification.code === ""
                          ? certification.name
                          : `(${certification.code}) - ${certification.name}`}
                      </strong>
                    </h5>
                    <p>{certification.brand}</p>
                    {/*<h6 class="w3-text-teal">
                    <i class="far fa-calendar-alt w3-margin-right">
                      {certification.date.toISOString().slice(0, 10)}
                    </i>
                  </h6>
                  */}
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
  }
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const filter = function (key: string, element: Element): void {
      document
        .querySelectorAll(".category-filter")
        .forEach((categoryFilter: Element) => {
          categoryFilter.classList.remove("w3-green");
        });
      element.classList.add("w3-green");
      document
        .querySelectorAll<HTMLElement>(".category-item")
        .forEach((categoryItem: HTMLElement) => {
          if (categoryItem.dataset["category"]?.trim() === key.trim()) {
            categoryItem.classList.add("w3-hide");
          } else {
            categoryItem.classList.remove("w3-hide");
          }
        });
    };
    document
      .querySelectorAll(".category-filter")
      .forEach((categoryFilter: Element) => {
        categoryFilter.addEventListener("click", () =>
          filter(categoryFilter.textContent || "", categoryFilter),
        );
      });
  });
</script>
