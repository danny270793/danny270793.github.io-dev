---
import MyCertifications, {
  Certification as MyCertification,
  CategoryOrder,
} from "../libraries/me/knowledges/certifications";
import CertificationsBackground from "../../public/images/parallax/certification.jpg";
import CertificationLarge from "./certification-large.astro";
import CertificationSmall from "./certification-small.astro";

const { parallaxHeight = "25vh" } = Astro.props;
---

<div
  id="certifications"
  class="parallax w3-display-container"
  style={`background-image: url("${CertificationsBackground.src}"); min-height: ${parallaxHeight}`}
>
  <div class="w3-display-middle no-spaces">
    <span
      class="w3-center w3-padding w3-black w3-xlarge w3-wide w3-animate-opacity"
    >
      Certifications
    </span>
  </div>
</div>
<div class="w3-content w3-container w3-padding-64">
  <div class="w3-center">
    <div class="category-filter w3-bar-item w3-button w3-green">All</div>
    {
      [
        ...new Set(
          MyCertifications.map(
            (certification: MyCertification) => certification.category,
          ).sort((a, b) => CategoryOrder[a] - CategoryOrder[b]),
        ),
      ].map((category) => (
        <div class="category-filter w3-bar-item w3-button">{category}</div>
      ))
    }
  </div>

  {/*
    [
      ...new Set(
        MyCertifications.map(
          (certification: MyCertification) => certification.category,
        ).sort((a, b) => CategoryOrder[a] - CategoryOrder[b]),
      ),
    ].map((category) => (
      MyCertifications.filter(e => e.category === category).sort(
        (a, b) =>
          (CategoryOrder[a.category] + 1) * 10 +
          a.order -
          (CategoryOrder[b.category] + 1) * 10 +
          b.order,
      ).chunk(3)
      .map((certifications: Certification[]) => (
        <div></div>))
    ))
  }

  {
    MyCertifications.sort(
      (a, b) =>
        (CategoryOrder[a.category] + 1) * 10 +
        a.order -
        (CategoryOrder[b.category] + 1) * 10 +
        b.order,
    )
      .chunk(3)
      .map((certifications: MyCertification[]) => (
        <div>
          {certifications.map((certification: MyCertification) => (
            <CertificationSmall certification={certification}/>
          ))}

          <div class="w3-row w3-hide-small">
            {certifications.map((certification: MyCertification) => (
              <CertificationLarge certification={certification}/>
            ))}
          </div>
        </div>
      ))
  }
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const filter = function (key: string, element: Element): void {
      document
        .querySelectorAll(".category-filter")
        .forEach((categoryFilter: Element) => {
          categoryFilter.classList.remove("w3-green");
        });
      element.classList.add("w3-green");
      document
        .querySelectorAll<HTMLElement>(".category-item")
        .forEach((categoryItem: HTMLElement) => {
          if (categoryItem.dataset["category"]?.trim() === key.trim()) {
            categoryItem.classList.add("w3-hide");
          } else {
            categoryItem.classList.remove("w3-hide");
          }
        });
    };
    document
      .querySelectorAll(".category-filter")
      .forEach((categoryFilter: Element) => {
        categoryFilter.addEventListener("click", () =>
          filter(categoryFilter.textContent || "", categoryFilter),
        );
      });
  });
</script>
