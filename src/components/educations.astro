---
import MyEducations from "../libraries/me/knowledges/educations";
import type { Education } from "../libraries/me/knowledges/educations";
import educationBackground from "../images/parallax/education.jpg";
import { Image } from "astro:assets";
---

<!-- Enhanced Hero Section -->
<section class="hero-modern parallax header" style={`background-image: url("${educationBackground.src}")`}>
  <div class="hero-overlay"></div>
  
  <!-- Floating Academic Icons -->
  <div class="floating-elements">
    <div class="floating-icon animate-float" style="top: 15%; left: 8%; animation-delay: 0s;">
      <i class="fas fa-graduation-cap"></i>
    </div>
    <div class="floating-icon animate-float" style="top: 70%; right: 12%; animation-delay: 2s;">
      <i class="fas fa-book-open"></i>
    </div>
    <div class="floating-icon animate-float" style="bottom: 25%; left: 15%; animation-delay: 4s;">
      <i class="fas fa-university"></i>
    </div>
    <div class="floating-icon animate-float" style="top: 35%; right: 20%; animation-delay: 6s;">
      <i class="fas fa-medal"></i>
    </div>
    <div class="floating-icon animate-float" style="top: 60%; left: 25%; animation-delay: 8s;">
      <i class="fas fa-microscope"></i>
    </div>
  </div>

  <div class="hero-content animate-fade-in-up">
    <h1 class="hero-title animate-fade-in-up animate-delay-200">
      Education
    </h1>
    <p class="hero-subtitle animate-fade-in-up animate-delay-500">
      Academic Foundation & Continuous Learning Journey
    </p>
    <p class="hero-description animate-fade-in-up animate-delay-700">
      Building expertise through formal education and lifelong learning commitment
    </p>
    
    <div class="hero-actions animate-fade-in-up animate-delay-1000">
      <a href="#education-content" class="btn-modern btn-primary">
        <i class="fas fa-graduation-cap"></i>
        Explore My Education
      </a>
      <a href="#certifications" class="btn-modern btn-outline">
        <i class="fas fa-certificate"></i>
        View Certifications
      </a>
    </div>
  </div>
  
  <!-- Animated Scroll Indicator -->
  <div class="scroll-indicator animate-bounce">
    <p>Scroll to explore</p>
    <i class="fas fa-chevron-down"></i>
  </div>
</section>

<!-- Beautiful Education Section -->
<section id="education-content" class="education-section">
  <div class="container">
    <!-- Section Header -->
    <div class="section-header scroll-animate">
      <h2 class="section-title">Academic Journey</h2>
      <p class="section-subtitle">
        A strong educational foundation combined with continuous learning and professional development
      </p>
    </div>
    
    <!-- Education Timeline -->
    <div class="education-timeline">
      {MyEducations.map((education: Education, index) => (
        <div class={`education-card modern-card hover-lift scroll-animate animate-delay-${index * 200}`}>
          <div class="education-image-container">
            <div class="education-image">
              <Image
                src={education.image}
                alt={education.institution}
                class="institution-logo"
              />
              <div class="education-overlay">
                <div class="education-badge">
                  <i class="fas fa-graduation-cap"></i>
                  <span>Degree</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="education-content">
            <div class="education-header">
              <h3 class="education-degree text-gradient">{education.name}</h3>
              <div class="education-period">
                <i class="fas fa-calendar-alt"></i>
                <span>{education.from} - {education.to}</span>
              </div>
            </div>
            
            <div class="education-institution">
              <i class="fas fa-university"></i>
              <span>{education.institution}</span>
            </div>
            
            <div class="education-achievements">
              <div class="achievement-item">
                <i class="fas fa-medal"></i>
                <span>Academic Excellence</span>
              </div>
              <div class="achievement-item">
                <i class="fas fa-project-diagram"></i>
                <span>Practical Projects</span>
              </div>
              <div class="achievement-item">
                <i class="fas fa-users"></i>
                <span>Team Collaboration</span>
              </div>
            </div>
            
            <div class="education-skills">
              <div class="skill-category">
                <i class="fas fa-brain"></i>
                <span>Critical Thinking & Problem Solving</span>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
/**
 * Education Animation System
 * Handles scroll-triggered animations and interactive elements
 */

document.addEventListener('DOMContentLoaded', function() {
    
    // Setup Intersection Observer for scroll animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
                
                // Handle animated counters
                if (entry.target.querySelector('[data-count]')) {
                    animateCounters(entry.target);
                }
            }
        });
    }, observerOptions);

    // Observe all scroll-animate elements
    const scrollElements = document.querySelectorAll('.scroll-animate');
    scrollElements.forEach(element => {
        observer.observe(element);
    });

    // Animate counters
    function animateCounters(container) {
        const counters = container.querySelectorAll('[data-count]');
        counters.forEach(counter => {
            const target = parseInt(counter.getAttribute('data-count'));
            const suffix = counter.getAttribute('data-suffix') || '';
            const duration = 2000;
            const increment = target / (duration / 16);
            let current = 0;
            
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    counter.textContent = target + suffix;
                    clearInterval(timer);
                } else {
                    counter.textContent = Math.floor(current) + suffix;
                }
            }, 16);
        });
    }

    // Add smooth scroll for anchor links
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                const offsetTop = target.offsetTop - 80; // Account for fixed header
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Enhanced button interactions
    const modernButtons = document.querySelectorAll('.btn-modern');
    modernButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-3px) scale(1.02)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
        
        // Add ripple effect on click
        button.addEventListener('click', function(e) {
            const ripple = document.createElement('span');
            ripple.classList.add('ripple-effect');
            
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = (e as MouseEvent).clientX - rect.left - size / 2;
            const y = (e as MouseEvent).clientY - rect.top - size / 2;
            
            ripple.style.width = ripple.style.height = size + 'px';
            ripple.style.left = x + 'px';
            ripple.style.top = y + 'px';
            
            this.style.position = 'relative';
            this.style.overflow = 'hidden';
            this.appendChild(ripple);
            
            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });

    console.log('Education animations initialized! ðŸŽ“');
});
</script>

<style>
/* Ripple Effect Styles */
.btn-modern {
    position: relative;
    overflow: hidden;
}

.ripple-effect {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    pointer-events: none;
    animation: ripple-animation 0.6s ease-out;
}

@keyframes ripple-animation {
    0% {
        transform: scale(0);
        opacity: 1;
    }
    100% {
        transform: scale(2);
        opacity: 0;
    }
}
</style>
